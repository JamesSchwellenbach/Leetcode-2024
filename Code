class Solution: #beats 17.68% runtime, 5.49% Memory 
    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:
        newList = [0]
        for i in range(len(answerKey)):
            if answerKey[i] == 'F' and newList[-1] >= 0:
                newList.append(-1)
            elif answerKey[i] == 'F':
                newList[-1] -= 1
            elif  answerKey[i] == 'T' and newList[-1] <= 0:
                newList.append(1)
            else:
                newList[-1] += 1
        if(len(newList) <= 2):
            best = 0
            for num in newList:
                best = max(best, abs(num) + k)
            return min(best, len(answerKey))
        newList = newList[1:]
        best = 0
        activeLeftPtr = 0
        inactiveLeftPtr = 1
        rightPtr = 1
        activeK = k
        inactiveK = k
        activeSum = abs(newList[0])
        inactiveSum = 0
        print(newList)
        while rightPtr < len(newList):
            
            inactiveSum = max(abs(newList[rightPtr]), inactiveSum+abs(newList[rightPtr]))
            best = max(best, inactiveSum +inactiveK, activeSum + activeK)
            while activeLeftPtr < rightPtr:
                if abs(newList[rightPtr]) <= activeK:
                    activeK -= abs(newList[rightPtr])
                    activeSum += abs(newList[rightPtr])
                    break
                else:
                    activeSum -= abs(newList[activeLeftPtr])
                    activeSum -= abs(newList[activeLeftPtr + 1])
                    activeK = min(activeK + abs(newList[activeLeftPtr + 1]), k)
                    activeLeftPtr += 2
            best = max(best, inactiveSum +inactiveK, activeSum + activeK)
            rightPtr += 1
            tmpK = activeK
            activeK = inactiveK
            inactiveK = tmpK
            tmpLeftPtr = activeLeftPtr
            activeLeftPtr = inactiveLeftPtr
            inactiveLeftPtr = tmpLeftPtr
            tmpSum = activeSum
            activeSum = inactiveSum
            inactiveSum = tmpSum
        return min(best, len(answerKey))
